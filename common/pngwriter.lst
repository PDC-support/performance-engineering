%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /wrk/pmannin/PDC-Summerschool2017/hybrid/../common/pngwriter.c
Compiled : 2017-07-26  15:27:56
Compiler : Version 8.5.6
Ftnlx    : Version 8503 (libcif 85008)
Target   : x86-64
Command  : driver.cc -h cpu=haswell -h dynamic -D __CRAYXC -D __CRAY_HASWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries -h list=a
           -I ../common -c ../common/pngwriter.c -o ../common/pngwriter.o
           -W l,-rpath=/opt/cray/cce/8.5.6/craylibs/x86-64
           -ibase-compiler /opt/cray/cce/8.5.6/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.5.6/craylibs/x86-64/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include
           -I /opt/gcc/4.8.1/snos/lib/gcc/x86_64-suse-linux/4.8.1/include-fixed
           -isystem /usr/include
           -I /opt/cray/mpt/7.5.1/gni/mpich-cray/8.4/include
           -I /opt/cray/libsci/16.11.1/CRAY/8.3/x86_64/include
           -I /opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I /opt/cray/alps/5.2.4-2.0502.9822.32.1.ari/include
           -I /opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I /opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I /opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I /opt/cray/pmi/5.0.11/include
           -I /opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I /opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I /opt/cray/cce/8.5.6/craylibs/x86-64/pkgconfig/../include
           -I /opt/cray/cce/8.5.6/craylibs/x86-64/pkgconfig/..//include
           -I /opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I /opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I /opt/cray-hss-devel/7.2.0/include

clx report
------------
Source   : /wrk/pmannin/PDC-Summerschool2017/hybrid/../common/pngwriter.c
Date     : 07/26/2017  15:27:56


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -h cache2,fp2,scalar2,thread2,vector2,mpi0,ipa3,noaggress         
           -h autoprefetch,noautothread,fusion2,nomsgs,nonegmsgs         
           -h nooverindex,pattern,unroll2,nozeroinc         
           -h noadd_paren,noupc,dwarf,nofp_trap,nofunc_trace         
           -h noomp_analyze,noomp_trace,nopat_trace         
           -h omp,noomp_acc,noacc         
           -h c99,noexceptions,noconform,noinfinitevl         
           -h notolerant,gnu         
           -h safe_addr         
           -h cpu=x86-64,haswell
           -h network=aries         
           -K trap=none 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.                #include <png.h>
    2.                #include <stdio.h>
    3.                #include <stdlib.h>
    4.                #include <stdint.h>
    5.                #include "pngwriter.h"
    6.                
    7.                /* Datatype for RGB pixel */
    8.                typedef struct {
    9.                    uint8_t red;
   10.                    uint8_t green;
   11.                    uint8_t blue;
   12.                } pixel_t;
   13.                
   14.                
   15.                void cmap(double value, const double scaling, const double maxval,
   16.                          pixel_t *pix);
   17.                
   18.                static int heat_colormap[256][3] = {
   19.                    {59, 76, 192}, {59, 76, 192}, {60, 78, 194}, {61, 80, 195},
   20.                    {62, 81, 197}, {64, 83, 198}, {65, 85, 200}, {66, 87, 201},
   21.                    {67, 88, 203}, {68, 90, 204}, {69, 92, 206}, {71, 93, 207},
   22.                    {72, 95, 209}, {73, 97, 210}, {74, 99, 211}, {75, 100, 213},
   23.                    {77, 102, 214}, {78, 104, 215}, {79, 105, 217}, {80, 107, 218},
   24.                    {82, 109, 219}, {83, 110, 221}, {84, 112, 222}, {85, 114, 223},
   25.                    {87, 115, 224}, {88, 117, 225}, {89, 119, 227}, {90, 120, 228},
   26.                    {92, 122, 229}, {93, 124, 230}, {94, 125, 231}, {96, 127, 232},
   27.                    {97, 129, 233}, {98, 130, 234}, {100, 132, 235}, {101, 133, 236},
   28.                    {102, 135, 237}, {103, 137, 238}, {105, 138, 239}, {106, 140, 240},
   29.                    {107, 141, 240}, {109, 143, 241}, {110, 144, 242}, {111, 146, 243},
   30.                    {113, 147, 244}, {114, 149, 244}, {116, 150, 245}, {117, 152, 246},
   31.                    {118, 153, 246}, {120, 155, 247}, {121, 156, 248}, {122, 157, 248},
   32.                    {124, 159, 249}, {125, 160, 249}, {127, 162, 250}, {128, 163, 250},
   33.                    {129, 164, 251}, {131, 166, 251}, {132, 167, 252}, {133, 168, 252},
   34.                    {135, 170, 252}, {136, 171, 253}, {138, 172, 253}, {139, 174, 253},
   35.                    {140, 175, 254}, {142, 176, 254}, {143, 177, 254}, {145, 179, 254},
   36.                    {146, 180, 254}, {147, 181, 255}, {149, 182, 255}, {150, 183, 255},
   37.                    {152, 185, 255}, {153, 186, 255}, {154, 187, 255}, {156, 188, 255},
   38.                    {157, 189, 255}, {158, 190, 255}, {160, 191, 255}, {161, 192, 255},
   39.                    {163, 193, 255}, {164, 194, 254}, {165, 195, 254}, {167, 196, 254},
   40.                    {168, 197, 254}, {169, 198, 254}, {171, 199, 253}, {172, 200, 253},
   41.                    {173, 201, 253}, {175, 202, 252}, {176, 203, 252}, {177, 203, 252},
   42.                    {179, 204, 251}, {180, 205, 251}, {181, 206, 250}, {183, 207, 250},
   43.                    {184, 207, 249}, {185, 208, 249}, {186, 209, 248}, {188, 209, 247},
   44.                    {189, 210, 247}, {190, 211, 246}, {191, 211, 246}, {193, 212, 245},
   45.                    {194, 213, 244}, {195, 213, 243}, {196, 214, 243}, {198, 214, 242},
   46.                    {199, 215, 241}, {200, 215, 240}, {201, 216, 239}, {202, 216, 239},
   47.                    {204, 217, 238}, {205, 217, 237}, {206, 217, 236}, {207, 218, 235},
   48.                    {208, 218, 234}, {209, 218, 233}, {210, 219, 232}, {211, 219, 231},
   49.                    {212, 219, 230}, {214, 220, 229}, {215, 220, 228}, {216, 220, 227},
   50.                    {217, 220, 225}, {218, 220, 224}, {219, 220, 223}, {220, 221, 222},
   51.                    {221, 221, 221}, {222, 220, 219}, {223, 220, 218}, {224, 219, 216},
   52.                    {225, 219, 215}, {226, 218, 214}, {227, 218, 212}, {228, 217, 211},
   53.                    {229, 216, 209}, {230, 216, 208}, {231, 215, 206}, {232, 215, 205},
   54.                    {233, 214, 203}, {233, 213, 202}, {234, 212, 200}, {235, 212, 199},
   55.                    {236, 211, 197}, {237, 210, 196}, {237, 209, 194}, {238, 208, 193},
   56.                    {239, 208, 191}, {239, 207, 190}, {240, 206, 188}, {240, 205, 187},
   57.                    {241, 204, 185}, {242, 203, 183}, {242, 202, 182}, {243, 201, 180},
   58.                    {243, 200, 179}, {243, 199, 177}, {244, 198, 176}, {244, 197, 174},
   59.                    {245, 196, 173}, {245, 195, 171}, {245, 194, 169}, {246, 193, 168},
   60.                    {246, 192, 166}, {246, 190, 165}, {246, 189, 163}, {247, 188, 161},
   61.                    {247, 187, 160}, {247, 186, 158}, {247, 184, 157}, {247, 183, 155},
   62.                    {247, 182, 153}, {247, 181, 152}, {247, 179, 150}, {247, 178, 149},
   63.                    {247, 177, 147}, {247, 175, 146}, {247, 174, 144}, {247, 172, 142},
   64.                    {247, 171, 141}, {247, 170, 139}, {247, 168, 138}, {247, 167, 136},
   65.                    {247, 165, 135}, {246, 164, 133}, {246, 162, 131}, {246, 161, 130},
   66.                    {246, 159, 128}, {245, 158, 127}, {245, 156, 125}, {245, 155, 124},
   67.                    {244, 153, 122}, {244, 151, 121}, {243, 150, 119}, {243, 148, 117},
   68.                    {242, 147, 116}, {242, 145, 114}, {241, 143, 113}, {241, 142, 111},
   69.                    {240, 140, 110}, {240, 138, 108}, {239, 136, 107}, {239, 135, 105},
   70.                    {238, 133, 104}, {237, 131, 102}, {237, 129, 101}, {236, 128, 99},
   71.                    {235, 126, 98}, {235, 124, 96}, {234, 122, 95}, {233, 120, 94},
   72.                    {232, 118, 92}, {231, 117, 91}, {230, 115, 89}, {230, 113, 88},
   73.                    {229, 111, 86}, {228, 109, 85}, {227, 107, 84}, {226, 105, 82},
   74.                    {225, 103, 81}, {224, 101, 79}, {223, 99, 78}, {222, 97, 77},
   75.                    {221, 95, 75}, {220, 93, 74}, {219, 91, 73}, {218, 89, 71},
   76.                    {217, 87, 70}, {215, 85, 69}, {214, 82, 67}, {213, 80, 66},
   77.                    {212, 78, 65}, {211, 76, 64}, {210, 74, 62}, {208, 71, 61},
   78.                    {207, 69, 60}, {206, 67, 59}, {204, 64, 57}, {203, 62, 56},
   79.                    {202, 59, 55}, {200, 57, 54}, {199, 54, 53}, {198, 52, 51},
   80.                    {196, 49, 50}, {195, 46, 49}, {193, 43, 48}, {192, 40, 47},
   81.                    {191, 37, 46}, {189, 34, 44}, {188, 30, 43}, {186, 26, 42},
   82.                    {185, 22, 41}, {183, 17, 40}, {182, 11, 39}, {180, 4, 38}
   83.                };
   84.                
   85.                
   86.                /*
   87.                 * Save the two dimensional array as a png image
   88.                 * Arguments:
   89.                 *   double *data - pointer to an array of nx * ny values
   90.                 *   int nx       - number of COLUMNS to be written
   91.                 *   int ny       - number of ROWS to be written
   92.                 *   char *fname  - name of the picture
   93.                 *   char lang    - either 'c' or 'f' denoting the memory
   94.                 *                  layout. That is, if 'f' is given, then rows
   95.                 *                  and columns are swapped.
   96.                 */
   97.                int save_png(double *data, const int height, const int width,
   98.                             const char *fname, const char lang)
   99.                {
  100.                    FILE *fp;
  101.                    png_structp pngstruct_ptr = NULL;
  102.                    png_infop pnginfo_ptr = NULL;
  103.                    png_byte **row_pointers = NULL;
  104.                    int i, j;
  105.                
  106.                    /* Default return status is failure */
  107.                    int status = -1;
  108.                
  109.                    int pixel_size = 3;
  110.                    int depth = 8;
  111.                
  112.                    /* Open the file and initialize the png library.
  113.                     * Note that in error cases we jump to clean up
  114.                     * parts in the end of this function using goto. */
  115.  +                 fp = fopen(fname, "wb");
  116.                    if (fp == NULL) {
  117.                        goto fopen_failed;
  118.                    }
  119.                
  120.  +                 pngstruct_ptr =
  121.                        png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
  122.                
  123.                    if (pngstruct_ptr == NULL) {
  124.                        goto pngstruct_create_failed;
  125.                    }
  126.                
  127.  +                 pnginfo_ptr = png_create_info_struct(pngstruct_ptr);
  128.                
  129.                    if (pnginfo_ptr == NULL) {
  130.                        goto pnginfo_create_failed;
  131.                    }
  132.                
  133.                    if (setjmp(png_jmpbuf(pngstruct_ptr))) {
  134.                        goto setjmp_failed;
  135.                    }
  136.                
  137.                    png_set_IHDR(pngstruct_ptr, pnginfo_ptr, (size_t) width,
  138.                                 (size_t) height, depth, PNG_COLOR_TYPE_RGB,
  139.                                 PNG_INTERLACE_NONE,
  140.                                 PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);
  141.                
  142.                    row_pointers = png_malloc(pngstruct_ptr, height * sizeof(png_byte *));
  143.                
  144.  + 1---------<     for (i = 0; i < height; i++) {
  145.    1                   png_byte *row = png_malloc(pngstruct_ptr,
  146.    1                                              sizeof(uint8_t) * width * pixel_size);
  147.    1                   row_pointers[i] = row;
  148.    1           
  149.    1                   /* Branch according to the memory layout */
  150.    1                   if (lang == 'c' || lang == 'C') {
  151.  + 1 Fr4-----<             for (j = 0; j < width; j++) {
  152.    1 Fr4                       pixel_t pixel;
  153.    1 Fr4                       /* Scale the values so that values between 0 and
  154.    1 Fr4                        * 100 degrees are mapped to values between 0 and 255 */
  155.    1 Fr4 I                     cmap(data[j + i * width], 2.55, 0.0, &pixel);
  156.    1 Fr4                       *row++ = pixel.red;
  157.    1 Fr4                       *row++ = pixel.green;
  158.    1 Fr4                       *row++ = pixel.blue;
  159.    1 Fr4----->             }
  160.    1                   } else if (lang == 'f' || lang == 'F') {
  161.  + 1 Fr4-----<             for (j = 0; j < width; j++) {
  162.    1 Fr4                       pixel_t pixel;
  163.    1 Fr4 I                     cmap(data[i + j * height], 2.55, 0.0, &pixel);
  164.    1 Fr4                       *row++ = pixel.red;
  165.    1 Fr4                       *row++ = pixel.green;
  166.    1 Fr4                       *row++ = pixel.blue;
  167.    1 Fr4----->             }
  168.    1                   } else {
  169.    1                       fprintf(stderr, "Unknown memory order %c for pngwriter!\n", lang);
  170.    1                       exit(EXIT_FAILURE);
  171.    1                   }
  172.    1--------->     }
  173.                
  174.                    png_init_io(pngstruct_ptr, fp);
  175.                    png_set_rows(pngstruct_ptr, pnginfo_ptr, row_pointers);
  176.                    png_write_png(pngstruct_ptr, pnginfo_ptr,
  177.                                  PNG_TRANSFORM_IDENTITY, NULL);
  178.                
  179.                    status = 0;
  180.                
  181.  + 1---------<     for (i = 0; i < height; i++) {
  182.    1                   png_free(pngstruct_ptr, row_pointers[i]);
  183.    1--------->     }
  184.                    png_free(pngstruct_ptr, row_pointers);
  185.                
  186.                    /* Cleanup with labels */
  187.                setjmp_failed:
  188.                pnginfo_create_failed:
  189.                    png_destroy_write_struct(&pngstruct_ptr, &pnginfo_ptr);
  190.                pngstruct_create_failed:
  191.                    fclose(fp);
  192.                fopen_failed:
  193.                    return status;
  194.                }
  195.                
  196.                /*
  197.                 * This routine sets the RGB values for the pixel_t structure using
  198.                 * the colormap data heat_colormap. If the value is outside the
  199.                 * acceptable png values 0, 255 blue or red color is used instead.
  200.                 */
  201.                void cmap(double value, const double scaling, const double offset,
  202.                          pixel_t *pix)
  203.                {
  204.                    int ival;
  205.                
  206.                    ival = (int)(value * scaling + offset);
  207.                    if (ival < 0) {             /* Colder than colorscale, substitute blue */
  208.                        pix->red = 0;
  209.                        pix->green = 0;
  210.                        pix->blue = 255;
  211.                    } else if (ival > 255) {
  212.                        pix->red = 255;         /* Hotter than colormap, substitute red */
  213.                        pix->green = 0;
  214.                        pix->blue = 0;
  215.                    } else {
  216.                        pix->red = heat_colormap[ival][0];
  217.                        pix->green = heat_colormap[ival][1];
  218.                        pix->blue = heat_colormap[ival][2];
  219.                    }
  220.                }
  221.                

CC-3021 CC: IPA save_png, File = pngwriter.c, Line = 115, Column = 5 
  "fopen" (called from "save_png") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA save_png, File = pngwriter.c, Line = 120, Column = 5 
  "png_create_write_struct" (called from "save_png") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA save_png, File = pngwriter.c, Line = 127, Column = 5 
  "png_create_info_struct" (called from "save_png") was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR save_png, File = pngwriter.c, Line = 144 
  A loop was not vectorized because it contains a call to function "png_malloc" on line 145.

CC-6005 CC: SCALAR save_png, File = pngwriter.c, Line = 151 
  A loop was unrolled 4 times.

CC-6291 CC: VECTOR save_png, File = pngwriter.c, Line = 151 
  A loop was not vectorized because a recurrence was found between "heat_colormap" at line 155 and "row" at line 156.

CC-3182 CC: IPA save_png, File = pngwriter.c, Line = 151, Column = 13 
  Loop has been flattened.

CC-3001 CC: IPA save_png, File = pngwriter.c, Line = 155, Column = 17 
  The call to leaf routine "cmap" was textually inlined.

CC-6005 CC: SCALAR save_png, File = pngwriter.c, Line = 161 
  A loop was unrolled 4 times.

CC-6291 CC: VECTOR save_png, File = pngwriter.c, Line = 161 
  A loop was not vectorized because a recurrence was found between "heat_colormap" at line 163 and "row" at line 164.

CC-3182 CC: IPA save_png, File = pngwriter.c, Line = 161, Column = 13 
  Loop has been flattened.

CC-3001 CC: IPA save_png, File = pngwriter.c, Line = 163, Column = 17 
  The call to leaf routine "cmap" was textually inlined.

CC-6287 CC: VECTOR save_png, File = pngwriter.c, Line = 181 
  A loop was not vectorized because it contains a call to function "png_free" on line 182.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
